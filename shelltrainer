#!/usr/bin/env python
#
# Repetition trainer. Some things need to be rote-learned and doing so is
# easiest by repetition. This tool simply prints an item from a source file on
# the shell. Hook this up to frequently used commands and you're constantly
# exposed to the what you want to rote-learn.
#

import json
import sys
import os
import random
import argparse
import termcolor

config="~/.shelltrainer"

class ShellTrainerCLI:
    def __init__(self):
        self.parser = argparse.ArgumentParser()
        self.parser.add_argument('--add-to')
        self.parser.add_argument('args', nargs="*")

    def parse_args(self, argv):
        args = self.parser.parse_args(argv)
        category = args.add_to
        st = ShellTrainer()
        if category != None:
            st.add(category, *args.args)
        else:
            st.pick_one(args.args[0] if len(args.args) > 0 else None)


class ShellTrainer(object):
    config_path = os.path.expanduser(config)

    def __init__(self):
        self.categories = {}
        self.load_source(self.config_path)

    def load_source(self, path):
        if not os.path.isdir(path):
            os.mkdir(path)
        for f in os.listdir(path):
            if not f.endswith(".json"):
                continue

            category = f[:f.rfind(".json")]

            with open(os.path.join(path, f)) as fp:
                j = json.load(fp)
                self.categories[category] = j


    def pick_one(self, category = None):
        s= ""
        if category == None:
            category = random.sample(self.categories.keys(), 1)[0]
            s = "[%s] " % category

        entry = random.sample(self.categories[category]["words"], 1)[0]
        s += termcolor.colored("%s: " % entry["definition"], attrs=["bold"])
        s += entry["description"]
        print s

    def create_new_category(self, category):
        cat = {"words" : [ ] }
        self.categories[category] = cat

    def add(self, category, definition, description):
        if not self.categories.has_key(category):
            self.create_new_category(category)

        j = self.categories[category]
        j['words'].append({u'definition':definition, u'description':description})

        fname = category + ".json"
        with open(os.path.join(self.config_path, fname), "w") as fp:
            json.dump(j, fp, indent=4)

if __name__ == "__main__":
    cli = ShellTrainerCLI()
    cli.parse_args(sys.argv[1:])

